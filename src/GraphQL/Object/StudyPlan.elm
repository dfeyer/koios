-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module GraphQL.Object.StudyPlan exposing (GroupRequiredArguments, SearchOptionalArguments, SearchRequiredArguments, group, groups, id, name, search, slug)

import GraphQL.InputObject
import GraphQL.Interface
import GraphQL.Object
import GraphQL.Scalar
import GraphQL.ScalarCodecs
import GraphQL.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


id : SelectionSet GraphQL.ScalarCodecs.Id GraphQL.Object.StudyPlan
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (GraphQL.ScalarCodecs.codecs |> GraphQL.Scalar.unwrapCodecs |> .codecId |> .decoder)


slug : SelectionSet String GraphQL.Object.StudyPlan
slug =
    Object.selectionForField "String" "slug" [] Decode.string


name : SelectionSet (Maybe String) GraphQL.Object.StudyPlan
name =
    Object.selectionForField "(Maybe String)" "name" [] (Decode.string |> Decode.nullable)


groups : SelectionSet decodesTo GraphQL.Object.StudyPlanGroup -> SelectionSet (List (Maybe decodesTo)) GraphQL.Object.StudyPlan
groups object_ =
    Object.selectionForCompositeField "groups" [] object_ (identity >> Decode.nullable >> Decode.list)


type alias GroupRequiredArguments =
    { id : GraphQL.ScalarCodecs.Id }


group : GroupRequiredArguments -> SelectionSet decodesTo GraphQL.Object.StudyPlanGroup -> SelectionSet decodesTo GraphQL.Object.StudyPlan
group requiredArgs object_ =
    Object.selectionForCompositeField "group" [ Argument.required "id" requiredArgs.id (GraphQL.ScalarCodecs.codecs |> GraphQL.Scalar.unwrapEncoder .codecId) ] object_ identity


type alias SearchOptionalArguments =
    { first : OptionalArgument Int
    , after : OptionalArgument String
    , last : OptionalArgument Int
    , before : OptionalArgument String
    }


type alias SearchRequiredArguments =
    { query : String }


search : (SearchOptionalArguments -> SearchOptionalArguments) -> SearchRequiredArguments -> SelectionSet decodesTo GraphQL.Object.NodeConnection -> SelectionSet (Maybe decodesTo) GraphQL.Object.StudyPlan
search fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { first = Absent, after = Absent, last = Absent, before = Absent }

        optionalArgs =
            [ Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "before" filledInOptionals.before Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "search" (optionalArgs ++ [ Argument.required "query" requiredArgs.query Encode.string ]) object_ (identity >> Decode.nullable)
