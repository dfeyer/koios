-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module GraphQL.Interface.UserProfile exposing (AvatarUrlOptionalArguments, Fragments, accessLevel, address, avatarUrl, country, creationDate, email, facebook, family, fax, firstname, fragments, id, instagram, lastname, locality, mastodon, maybeFragments, mobile, name, phone, postalCode, profilePublic, profileValidated, slug, twitter, username, website)

import GraphQL.InputObject
import GraphQL.Interface
import GraphQL.Object
import GraphQL.Scalar
import GraphQL.ScalarCodecs
import GraphQL.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode


type alias Fragments decodesTo =
    { onParentProfile : SelectionSet decodesTo GraphQL.Object.ParentProfile
    , onChildProfile : SelectionSet decodesTo GraphQL.Object.ChildProfile
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo GraphQL.Interface.UserProfile
fragments selections =
    Object.exhuastiveFragmentSelection
        [ Object.buildFragment "ParentProfile" selections.onParentProfile
        , Object.buildFragment "ChildProfile" selections.onChildProfile
        ]


{-| Can be used to create a non-exhuastive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onParentProfile = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onChildProfile = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


id : SelectionSet GraphQL.ScalarCodecs.Id GraphQL.Interface.UserProfile
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (GraphQL.ScalarCodecs.codecs |> GraphQL.Scalar.unwrapCodecs |> .codecId |> .decoder)


slug : SelectionSet String GraphQL.Interface.UserProfile
slug =
    Object.selectionForField "String" "slug" [] Decode.string


creationDate : SelectionSet GraphQL.ScalarCodecs.DateTime GraphQL.Interface.UserProfile
creationDate =
    Object.selectionForField "ScalarCodecs.DateTime" "creationDate" [] (GraphQL.ScalarCodecs.codecs |> GraphQL.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


accessLevel : SelectionSet Int GraphQL.Interface.UserProfile
accessLevel =
    Object.selectionForField "Int" "accessLevel" [] Decode.int


profilePublic : SelectionSet Bool GraphQL.Interface.UserProfile
profilePublic =
    Object.selectionForField "Bool" "profilePublic" [] Decode.bool


profileValidated : SelectionSet Bool GraphQL.Interface.UserProfile
profileValidated =
    Object.selectionForField "Bool" "profileValidated" [] Decode.bool


type alias AvatarUrlOptionalArguments =
    { size : OptionalArgument Int }


avatarUrl : (AvatarUrlOptionalArguments -> AvatarUrlOptionalArguments) -> SelectionSet String GraphQL.Interface.UserProfile
avatarUrl fillInOptionals =
    let
        filledInOptionals =
            fillInOptionals { size = Absent }

        optionalArgs =
            [ Argument.optional "size" filledInOptionals.size Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForField "String" "avatarUrl" optionalArgs Decode.string


username : SelectionSet String GraphQL.Interface.UserProfile
username =
    Object.selectionForField "String" "username" [] Decode.string


name : SelectionSet String GraphQL.Interface.UserProfile
name =
    Object.selectionForField "String" "name" [] Decode.string


firstname : SelectionSet String GraphQL.Interface.UserProfile
firstname =
    Object.selectionForField "String" "firstname" [] Decode.string


lastname : SelectionSet String GraphQL.Interface.UserProfile
lastname =
    Object.selectionForField "String" "lastname" [] Decode.string


address : SelectionSet (Maybe String) GraphQL.Interface.UserProfile
address =
    Object.selectionForField "(Maybe String)" "address" [] (Decode.string |> Decode.nullable)


postalCode : SelectionSet (Maybe String) GraphQL.Interface.UserProfile
postalCode =
    Object.selectionForField "(Maybe String)" "postalCode" [] (Decode.string |> Decode.nullable)


locality : SelectionSet (Maybe String) GraphQL.Interface.UserProfile
locality =
    Object.selectionForField "(Maybe String)" "locality" [] (Decode.string |> Decode.nullable)


country : SelectionSet (Maybe String) GraphQL.Interface.UserProfile
country =
    Object.selectionForField "(Maybe String)" "country" [] (Decode.string |> Decode.nullable)


phone : SelectionSet (Maybe String) GraphQL.Interface.UserProfile
phone =
    Object.selectionForField "(Maybe String)" "phone" [] (Decode.string |> Decode.nullable)


mobile : SelectionSet (Maybe String) GraphQL.Interface.UserProfile
mobile =
    Object.selectionForField "(Maybe String)" "mobile" [] (Decode.string |> Decode.nullable)


fax : SelectionSet (Maybe String) GraphQL.Interface.UserProfile
fax =
    Object.selectionForField "(Maybe String)" "fax" [] (Decode.string |> Decode.nullable)


email : SelectionSet (Maybe String) GraphQL.Interface.UserProfile
email =
    Object.selectionForField "(Maybe String)" "email" [] (Decode.string |> Decode.nullable)


website : SelectionSet (Maybe String) GraphQL.Interface.UserProfile
website =
    Object.selectionForField "(Maybe String)" "website" [] (Decode.string |> Decode.nullable)


twitter : SelectionSet (Maybe String) GraphQL.Interface.UserProfile
twitter =
    Object.selectionForField "(Maybe String)" "twitter" [] (Decode.string |> Decode.nullable)


facebook : SelectionSet (Maybe String) GraphQL.Interface.UserProfile
facebook =
    Object.selectionForField "(Maybe String)" "facebook" [] (Decode.string |> Decode.nullable)


instagram : SelectionSet (Maybe String) GraphQL.Interface.UserProfile
instagram =
    Object.selectionForField "(Maybe String)" "instagram" [] (Decode.string |> Decode.nullable)


mastodon : SelectionSet (Maybe String) GraphQL.Interface.UserProfile
mastodon =
    Object.selectionForField "(Maybe String)" "mastodon" [] (Decode.string |> Decode.nullable)


family : SelectionSet decodesTo GraphQL.Object.Family -> SelectionSet decodesTo GraphQL.Interface.UserProfile
family object_ =
    Object.selectionForCompositeField "family" [] object_ identity
